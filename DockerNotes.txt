Technologies Need to understand before working with docker

1) Bash(Unix Shell)
2) Package Managment
3) Git
4) Python
5) Vagrant
6) go = Docker is written using Go

===================================================|
Dcoker Engine have the ability to run Containers   | 
===================================================|

Installing Docker on Ubuntu 14.04
=====================================

$ sudo apt-get update
$ sudo apt-get install -y docker.io


Download the latest docker version
===================================
$ sudo curl -sSL htts://get.docker.com | sudo sh


Check The version of the installed docker
==========================================
$ docker --version


running docker without the sudo command
=========================================

$ sudo usermod -aG docker $USER
			
			OR
$ sudo gpasswd -a <user> docker



Vagrant Configuration for docker creation
===========================================

Vagrant.configure(2) do |config|
	config.vm.hostname = "ubuntu/trusty64"
	config.vm.network "private_network", ip:"192.168.33.2"
	config.vm.provider "virtualbox" do |vb|
		vb.customize ["modifyvm", :id,"--memory","1024"]
	end

	config.vm.provision :shell, :path => "docker-bootstrap.sh"

end


docker-bootstrap.sh
====================

#!/bin/bash

sudo apt-get update
sudo apt-get install -y install docker.io
sudo gpasswd -a vagrant dokcer
sudo service docker.io restartdocker build -t dipayan/alpine-install:1.0 .


$ vagrant up
$ vagrant ssh


check the available docker images
====================================

$ docker search ubuntu

pull an image
==================
$ docker pull <image name>

check the available/downloaded images in the system
====================================================
$ docker images


To start a docker 
==================
$ docker run --name ubu -d -i -t ubuntu

To attach with a already running container
=============================================
$ docker attach ubu<container_name>

To remove an image of stopped container
========================================

$ docker rmi <container_name>

To run a container
=====================docker build -t dipayan/alpine-install:1.0 .
$ docker run -i -t <image_name"ubuntu:14:04"> /bin/bash


Run Docker in Detached mode
==============================

$ docker run -d -p 1234:1234 python:2.7 python -m SimpleHTTPServer 1234

This command will keep running the container and exposing port 1234 to docker host 1234

Dcoker decides its own portforwarding using the P  option  and exposing port 1234 with the --expose option

$ docker run -d -P --expose=1234 python:2.7 python -m SimpleHTTPServer 1234
$ docker port <container_id>

Restart a container
=======================
$ docker restart <container_id>

Remove a container
=====================
$ docker rm <container_id>


Remove all Suspended Containers
====================================
$ docker rm $(docker ps -a -q)



Sharing host data with a container
=====================================
Use the -v option  of docker run to mount a host volume in the contianer

Example , to share the working directory of your host into a /cookbook  directory in a container

$ docker run -i -t -v $PWD:/cookbook ubuntu:14.04 /bin/bash

Inspect the mount mapping with the docker inspect  command 

$ docker inspect -f <container_id>


Copying Data To and From Containers
====================================

$ docker run -d --name testcopy ubuntu:14.04 sleep 360
$ docker exec it testcopy /bin/bash

root@xasd123234# cd /root ; echo "Hello World" > file.txt ; exit

$ docker cp testcopy:/root/file.txt
$ cat file.txt

To Copy from the host to the Container
======================================

$ echo "I am in the host machine " >> hostmachine.txt
$ docker exec -u testcopy sh -c 'cat /root/hostmachine.txt' < hostmachine.txt
$ docker exec -i testcopy sh -c 'cat /root/hostmachine.txt'


To Copy from One Container to Another Container
================================================
$ docker cp c1:/root/file.txt .
$ docker exec -i c2 sh -c 'cat > /root/file.txt' < file.txt


Docker Commit
===============
Let's start a container with an interactive bash shell and update it 

$ docker run -i -t ubuntu:14:04  /bin/bash
root@69701adsae /# apt-get update

 now on the host machine 
 $ docker commit 69701adsae ubuntu:update


 Saving images in tar file for sharing
 ==========================================

 $ docker export <container_id> > container.tar

 Import a container
 ===================
 $ docker import -update < container.tar



Basic of Dockerfile
========================

Create a Dockerfile(with a capital D) in a directory

FROM alpine
CMD ["echo", "hello world!"]
COPY script.sh /script.sh
CMD ["./script.sh"]

to create the image 

$ docker build . 

This will create the image but only with the image ID not the name 

$ docker run --name test <container ID>


Running nginx Docker
=-=====================

$ docker pull nginx:1.10.2-alpine
$ docker run --name nginx-alpine -p 80:80 nginx:1.10.2-alpine(This command will not give the prompt back)

Running the container in background
$ docker run --name nginx-alpine -d -p 80:80 nginx:1.10.2-alpine

Run command inside the container from the localhost
$ docker exec -ti nginx-alpine /bin/bash

To stop the container

$ docker stop nginx-alpine


Example commands to host a website from host with running from a container

$ docker pull nginx 

$ docker run --name nginx-image -d -v /work/docker/index.html:/usr/share/nginx/html/index.html -p 80:80 nginx


DockerFile Example To create a New image
FROM nginx
MAINTAINER inbox.dipayan@gmail.com
COPY ./file.txt	/etc/nginx/file.txt



Docker Run and Remove 
========================
$ docker run -it --rm alpine:3.4 /bin/sh



Basic DockerFile example on alpine
====================================
FROM alpine:3.4
MAINTAINER Dipayan Dutta

RUN apk update
RUN apk add vim
RUN apk add cur


Run The dockerfile (To Build The Image)
============================================
docker build -t dipayan/alpine-install:1.0 .

Now Check the image is created
================================

docker images 


Check the intermediatory Images (image Cache)
==================================

$ docker images -a 



Docker Dangling Image
=========================

If a image does not have any name then this is called a Dangling Image

How to check a Dangling Image??
================================

$ docker images --filter "dangling=true"


Remove a dangling image
===========================

$ docker rmi $(docker images -q --filter "dangling=true")



Dockerfile steps
===========================

1. Pick the right image
2. Run the image and start play with it , check all is OK
3. create a Dockerfile


Docker Dangling Volumes
============================
$ docker volume ls -qf dangling=true


Delete the Dangling Volumes
=============================

$ docker volume rm $(docker volume ls -qf dangling=true)



Run alpine python
========================

FROM python:3.6.1-alpine

RUN apk update && apk add build-base

RUN ln -s /usr/include/locale.h /usr/include/locale.h

RUN pip install numpy



An php Container Example installing composer inside the container
=======================================================================

Dockerfile

FROM php:7.1.2-apache

RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
    php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
    php composer-setup.php &&\
    php -r "unlink('composer-setup.php');"
    mv composer.phar /usr/local/bin/composer
    
 
COPY ./composer.json /var/www/html

RUN apt-get update && \
    apt-get upgrade && \
    apt-get install build-essential -y && \
    apt-get install git -y

RUN composer install
    
Now create the JSON and write down the dependecies
======================================================

composer.json

{
    "require":{
            "slim/slim": "^3.0"
    }
}
    
    
Map current directory of the localhost with the working directory of the image
==================================================================================

$ docker run --rm -v $(pwd):/var/www/html -v /var/www/html/vendor -p 80:80 <image name>
